name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  # Stage 1 - Test
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
      - run: pip install -r requirements.txt
      - run: pytest tests/ -v --cov=app -cov-fail-under=85

  # Stage 2 - Build
  build:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v2

      - name: Build container
        run: docker build -t vdi-session-broker:${{ github.sha }} .
      
      - name: Test container
        run: |
          docker run -d -p 8000:8000 --name test vdi-session-broker:${{ github.sha }}
          
          for i in {1..15}; do
            if curl -f http://localhost:8000/docs 2>/dev/null; then
              break
            fi
            sleep 2
          done
          
          curl -f -X POST http://localhost:8000/sessions -H "Content-Type: application/json" -d '{"userId": "cicdtest"}'
          docker stop test && docker rm test
      
      - name: Security Scan
        run: |
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            -v $(pwd):/app aquasec/trivy:latest image \
            --severity HIGH,CRITICAL vdi-session-broker:${{ github.sha }}
        continue-on-error: true  # ONLY FOR INTERVIEW PURPOSES, DO NOT USE IN PRODUCTION

      - name: Container metrics
        run: |
          echo "Image size: $(docker images vdi-session-broker:${{ github.sha }} --format '{{.Size}}')"
          echo "Exposed ports: $(docker inspect vdi-session-broker:${{ github.sha }} --format '{{.Config.ExposedPorts}}')"
          docker run --rm --name metrics-check vdi-session-broker:${{ github.sha }} ps aux
          
      - name: Application metrics
        run: |
          docker run -d -p 8000:8000 --name app vdi-session-broker:${{ github.sha }}
          sleep 5
          curl -s http://localhost:8000/health | jq
          echo "Response time: $(curl -w '%{time_total}' -s http://localhost:8000/health)"
          docker stop app

  # Stage 3 - Deploy
  deploy:
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/main'
    steps:
    - run: echo "Ready for deployment."